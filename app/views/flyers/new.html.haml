%h2 Create New Flyer

%button#authorize_button{:style => "display: none;", :class => 'btn btn-primary'} Sign In To Google Calendar
%button#signout_button{:style => "display: none;", :class => 'btn btn-primary'} Sign Out Of Google Calendar
%button#viewcalendar_button{:style => "display: default;", :class => 'btn btn-primary'} Show/Hide Google Calendar Events
%form#calendar{:onsubmit => "handleRadio()", :style => "display: none;"}
  %p Select which event you would like to import
%button#calendar_submit{:style => "display: none;", :class => 'btn btn-primary'} Submit Event Selection
%br
%br
%select#input_selector{:onchange => "showForm(this)"}
  %option{:value => "0", :selected => "selected"}Select Option
  %option{:value => "1"}Choose a Default Background
  %option{:value => "2"}Upload a Custom Background
  %option{:value => "3"}Upload a Flyer Image

#default_bg.input_form{:style => "display:none"}
  = form_tag(flyers_path, multipart: true) do
    = hidden_field :flyer, 'custFlyer', :value => 1

    = label :flyer, :title, 'Title'
    = text_field :flyer, 'title', :required => true

    = label :flyer, :description, 'Description'
    = text_field :flyer, 'description', :required => true

    = label :flyer, :event_date, 'Event Date'
    = datetime_select :flyer, :event_date, :required => true

    = label :flyer, :location, 'Location'
    = text_field :flyer, 'location', :required => true

    = label :flyer, :display_date, 'Start Displaying on'
    = date_select :flyer, :display_date, :required => true

    = label :flyer, :image, 'Choose a Background'
    - @default_imgs.each do |default|
      = radio_button :flyer, 'defaultBg', image_path("#{default.split('/').last}"), :checked => "checked"
      = image_tag image_path("#{default.split('/').last}"), :class => 'menu_icon', :size => '64x64'

    = submit_tag 'Save Changes', :class => 'btn btn-primary'

#upload_bg.input_form{:style => "display:none"}
  = form_tag(flyers_path, multipart: true) do
    = hidden_field :flyer, 'custFlyer', :value => 1

    = label :flyer, :title, 'Title'
    = text_field :flyer, 'title', :required => true

    = label :flyer, :description, 'Description'
    = text_field :flyer, 'description', :required => true

    = label :flyer, :event_date, 'Event Date'
    = datetime_select :flyer, :event_date, :required => true

    = label :flyer, :location, 'Location'
    = text_field :flyer, 'location', :required => true

    = label :flyer, :display_date, 'Start Displaying on'
    = date_select :flyer, :display_date, :required => true

    = label :flyer, :image, "Upload a Background"
    = file_field :flyer, :image, :required => true

    = submit_tag 'Save Changes', :class => 'btn btn-primary'

#upload_flyer.input_form{:style => "display:none"}
  = form_tag(flyers_path, multipart: true) do
    = hidden_field :flyer, 'custFlyer', :value => 0

    = label :flyer, :title, 'Title'
    = text_field :flyer, 'title', :required => true

    = label :flyer, :description, 'Description'
    = text_field :flyer, 'description', :required => true

    = label :flyer, :event_date, 'Event Date'
    = datetime_select :flyer, :event_date, :required => true

    = label :flyer, :location, 'Location'
    = text_field :flyer, 'location', :required => true

    = label :flyer, :display_date, 'Start Displaying on'
    = date_select :flyer, :display_date, :required => true

    = label :flyer, :image, "Upload a Flyer"
    = file_field :flyer, :image, :required => true

    = submit_tag 'Save Changes', :class => 'btn btn-primary'

%br/
%br/
= link_to 'Back to active flyers page', flyers_path, :class => 'btn btn-primary'

:javascript
  // Client ID and API key from the Developer Console
  var CLIENT_ID = '565623032046-i7ljmu54cru67hfsghgq2o7qnr2g7kb4.apps.googleusercontent.com';
  var API_KEY = 'AIzaSyCaR9fYb3cuhP5VX_73umxz0_BZCwbC7EY';
  // Array of API discovery doc URLs for APIs used by the quickstart
  var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];
  // Authorization scopes required by the API; multiple scopes can be
  // included, separated by spaces.
  var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";
  var authorizeButton = document.getElementById('authorize_button');
  var signoutButton = document.getElementById('signout_button');
  var events;
  // On load, called to load the auth2 library and API client library.
  function handleClientLoad() {
    gapi.load('client:auth2', initClient);
  }
  // Initializes the API client library and sets up sign-in state listeners.
  function initClient() {
    gapi.client.init({
      apiKey: API_KEY,
      clientId: CLIENT_ID,
      discoveryDocs: DISCOVERY_DOCS,
      scope: SCOPES
    }).then(function () {
      // Listen for sign-in state changes.
      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
      // Handle the initial sign-in state.
      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      authorizeButton.onclick = handleAuthClick;
      signoutButton.onclick = handleSignoutClick;
      viewcalendar_button.onclick = toggleCalendarClick;
    }, function(error) {
      // appendPre(JSON.stringify(error, null, 2));
    });
  }
  /**
   *  Called when the signed in status changes, to update the UI
   *  appropriately. After a sign-in, the API is called.
   */
  function updateSigninStatus(isSignedIn) {
    if (isSignedIn) {
      authorizeButton.style.display = 'none';
      signoutButton.style.display = 'block';
      listUpcomingEvents();
    } else {
      authorizeButton.style.display = 'block';
      signoutButton.style.display = 'none';
    }
  }
  // Sign in the user upon button click.
  function handleAuthClick(event) {
    gapi.auth2.getAuthInstance().signIn();
  }
  // Sign out the user upon button click.
  function handleSignoutClick(event) {
    gapi.auth2.getAuthInstance().signOut();
  }
  /**
   * Append a pre element to the body containing the given message
   * as its text node. Used to display the results of the API call.
   *
   * @param {string} message Text to be placed in pre element.
   */
  function appendRadio(event) {
    var radio = document.getElementById('calendar');
    var group = document.createElement('div');
    group.setAttribute('class', 'form-group');
    group.setAttribute('style', 'display: flex');
    var radioContent = document.createElement("INPUT");
    radioContent.setAttribute("type", "radio");
    radioContent.setAttribute("name", "calendar");
    radioContent.setAttribute("id", event.id);
    radioContent.setAttribute("value", event.id);
    var label = document.createElement("LABEL")
    label.setAttribute('for', event.id);
    label.innerText = event.summary;
    group.appendChild(radioContent);
    group.appendChild(label);
    radio.appendChild(group);
    // radio.appendChild(document.createElement("BR"));
  }
  function handleRadio() {
    document.getElementById('calendar').setAttribute("style", "display:none;");
    document.getElementById('calendar_submit').setAttribute("style", "display:none;");
    var ele = document.getElementsByTagName('input');
    for(i = 0; i < ele.length; i++) {
      if(ele[i].type=="radio") {
        if(ele[i].checked) {
          autofillForm(ele[i].id);
          break;
        }
      }
    }
  }
  function toggleCalendarClick() {
    var form = document.getElementById('calendar');
    var submit_button = document.getElementById('calendar_submit');
    if(form.style.display == 'none') {
      form.setAttribute('style', 'display: default;');
      submit_button.setAttribute('style', 'display: default;');
    } else {
      form.setAttribute('style', 'display: none;');
      submit_button.setAttribute('style', 'display: none;');
    }
  }
  function autofillForm(id) {
    var forms = [document.getElementById('default_bg').children[0],
                  document.getElementById('upload_bg').children[0],
                  document.getElementById('upload_flyer').children[0]];
    var titles = [];
    var descriptions = [];
    var locations = [];
    var timedates = [];
    for(i = 0; i < forms.length; i++) {
      var form = forms[i];
      var timedate = [];
      for(j = 0; j < form.children.length; j++) {
        var child = form.children[j];
        if(child.id == 'flyer_title')
          titles.push(child);
        if(child.id == 'flyer_description')
          descriptions.push(child);
        if(child.id == 'flyer_location')
          locations.push(child);
        if(child.id == 'flyer_event_date_1i')
          timedate.push(child);
        if(child.id == 'flyer_event_date_2i')
          timedate.push(child);
        if(child.id == 'flyer_event_date_3i')
          timedate.push(child);
        if(child.id == 'flyer_event_date_4i')
          timedate.push(child);
        if(child.id == 'flyer_event_date_5i')
          timedate.push(child);
      }
      timedates.push(timedate);
    }
    var selected_event;
    for(i = 0; i < events.length; i++) {
      if(id == events[i].id) {
        selected_event = events[i];
      }
    }
    for(i = 0; i < titles.length; i++) {
      titles[i].value = selected_event.summary;
    }
    for(i = 0; i < descriptions.length; i++) {
      descriptions[i].value = selected_event.description;
    }
    for(i = 0; i < locations.length; i++) {
      locations[i].value = selected_event.location;
    }
    var timedate_string = [];
    timedate_string.push(selected_event.start.dateTime.substring(0, 4));
    timedate_string.push(selected_event.start.dateTime.substring(5, 7));
    timedate_string.push(selected_event.start.dateTime.substring(8, 10));
    timedate_string.push(selected_event.start.dateTime.substring(11, 13));
    timedate_string.push(selected_event.start.dateTime.substring(14, 16));
    for(i = 0; i < timedates.length; i++) {
      var timedate = timedates[i];
      for(j = 0; j < timedate.length; j++) {
        var children = timedate[j].children;
        for(k = 0; k < children.length; k++) {
          if(children[k].value == timedate_string[j])
            children[k].selected = "selected";
          else
            children[k].removeAttribute("selected");
        }
      }
    }
  }
  /**
   * Print the summary and start datetime/date of the next ten events in
   * the authorized user's calendar. If no events are found an
   * appropriate message is printed.
   */
  function listUpcomingEvents() {
    gapi.client.calendar.events.list({
      'calendarId': 'primary',
      'timeMin': (new Date()).toISOString(),
      'showDeleted': false,
      'singleEvents': true,
      'maxResults': 30,
      'orderBy': 'startTime'
    }).then(function(response) {
      events = response.result.items;
      // appendPre('Upcoming events:');

      if (events.length > 0) {
        for (i = 0; i < events.length; i++) {
          var event = events[i];
          var when = event.start.dateTime;
          if (!when) {
            when = event.start.date;
          }
          // appendPre(event.summary + ' (' + when + ')')
          appendRadio(event)
        }
        document.getElementById('calendar_submit').onclick = handleRadio
      } else {
        // appendPre('No upcoming events found.');
        appendRadio({summary: "No upcoming events found."})
      }
    });
  }

  function showForm(control) {

    var forms = ["default_bg", "upload_bg", "upload_flyer"]
    forms.forEach(element => document.getElementById(element).style.display = "none")

    switch(control.value) {
      case "1":
        document.getElementById("default_bg").style.display = "block"
        break;
      case "2":
        document.getElementById("upload_bg").style.display = "block"
        break;
      case "3":
        document.getElementById("upload_flyer").style.display = "block"
        break;
      default:
    }
  }
%script{:async => "", :defer => "defer", :onload => "this.onload=function(){};handleClientLoad()", :onreadystatechange => "if (this.readyState === 'complete') this.onload()", :src => "https://apis.google.com/js/api.js"}
  :cdata
